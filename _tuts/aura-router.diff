diff --git a/composer.json b/composer.json
index 9577edb..52e5602 100644
--- a/composer.json
+++ b/composer.json
@@ -1,5 +1,6 @@
 {
     "require": {
-        "symfony/http-foundation": "~2.5"
+        "symfony/http-foundation": "~2.5",
+        "aura/router": "~2.1"
     }
 }
diff --git a/composer.lock b/composer.lock
index 0c27e0c..aee9a74 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,9 +4,63 @@
         "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "hash": "b00ccdf52f1019a5488e57d76eaf5eec",
+    "hash": "05160fed37a43d33fa4fa22bcc76836f",
     "packages": [
         {
+            "name": "aura/router",
+            "version": "2.1.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/auraphp/Aura.Router.git",
+                "reference": "23056b104816f495f4f9f88fc6e7d325671c3bc6"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/auraphp/Aura.Router/zipball/23056b104816f495f4f9f88fc6e7d325671c3bc6",
+                "reference": "23056b104816f495f4f9f88fc6e7d325671c3bc6",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "extra": {
+                "aura": {
+                    "type": "library",
+                    "config": {
+                        "common": "Aura\\Router\\_Config\\Common"
+                    }
+                },
+                "branch-alias": {
+                    "dev-develop-2": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Aura\\Router\\": "src/",
+                    "Aura\\Router\\_Config\\": "config/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-2-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Aura.Router Contributors",
+                    "homepage": "https://github.com/auraphp/Aura.Router/contributors"
+                }
+            ],
+            "description": "A web router implementation; given a URI path and a copy of $_SERVER, it will extract path-info parameter values for a specific route.",
+            "homepage": "https://github.com/auraphp/Aura.Router",
+            "keywords": [
+                "route",
+                "router",
+                "routing"
+            ],
+            "time": "2014-10-22 14:14:56"
+        },
+        {
             "name": "symfony/http-foundation",
             "version": "v2.5.6",
             "target-dir": "Symfony/Component/HttpFoundation",
diff --git a/index.php b/index.php
index ed2564e..d8c644d 100644
--- a/index.php
+++ b/index.php
@@ -11,21 +11,53 @@ try {
 // create a request object to help us
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-$request = Request::createFromGlobals();
+use Aura\Router\RouterFactory;
 
+$request = Request::createFromGlobals();
 $uri = $request->getPathInfo();
 
-if ($uri == '/' || $uri == '') {
+$routerFactory = new RouterFactory();
+$router = $routerFactory->newInstance();
+
+// create a router, build the routes, and then execute it
+$router->add('attendees_list', '/attendees')
+    ->addValues(['controller' => 'attendees_controller']);
+$router->add('homepage', '{/name}')
+    ->addValues(['controller' => 'homepage_controller']);
+$route = $router->match($uri, $request->server->all());
+
+// merge the matched attributes back into Symfony's request
+if ($route) {
+    $request->attributes->add($route->params);
+}
+
+// get the "controller" out, or default to error404_controller
+$controller = $request->attributes->get('controller', 'error404_controller');
+
+// execute the controller and get the response
+$response = call_user_func_array($controller, array($request));
+if (!$response instanceof Response) {
+    throw new Exception(sprintf('Your controller "%s" did not return a response!!', $controller));
+}
+
+$response->send();
+
+/*
+ * My Controllers!
+ */
+function homepage_controller(Request $request) {
 
     $content = '<h1>PHP Camp!</h1>';
     $content .= '<a href="/attendees">See the attendees</a>';
-    if ($name = $request->query->get('name')) {
+    if ($name = $request->attributes->get('name')) {
         $content .= sprintf('<p>Oh, and hello %s!</p>', $name);
     }
 
-    $response = new Response($content);
+    return new Response($content);
+}
 
-} elseif ($uri == '/attendees') {
+function attendees_controller(Request $request) {
+    global $dbh;
 
     $sql = 'SELECT * FROM php_camp';
     $content = '<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />';
@@ -40,14 +72,16 @@ if ($uri == '/' || $uri == '') {
     }
     $content .= '</table>';
 
-    $response = new Response($content);
+    return new Response($content);
+}
 
-} else {
+function error404_controller(Request $request) {
     $content = '<h1>404 Page not Found</h1>';
     $content .= '<p>Find a boy (or girl) scout - they can fix this!</p>';
 
     $response = new Response($content);
     $response->setStatusCode(404);
+
+    return $response;
 }
 
-$response->send();
